a:0
b:1
---
a:0
====
-> rm b


a:0
---
b:0
====
-> mv b a


a:0
b:0
----
a:0
====
-> local_cp a b


a:0
b:1
---
a:0
====
-> remote_cp b

Startégie:
mv, local_cp, remote_cp, local_cp
remote_cp, local_cp, mv
PB:

a:0
b:1
---
a:1
b:0
=====
mv a b # NON ! écrase b qui sert pour a

Idée: toute action qui crée un fichier (local_cp, remote_cp et mv) ajoute une extension temporaire.
Une fois toutes les actions effectuées, on renomme tous les fichiers pour retirer l'etension

Rq: rm n'est pas safe:

a:0
b:1
----
a:1
===
mv b a
ICI l'algo détectera qu'il faut effacer a -> Ne pas faire les suppressions à la fin!




RECAP:

Fichiers seulement sur dst: RM
Slt sur src: remote_cp (avec extension)
mv ce qu'il reste, local_cp si plus sur src, rm si plus sur dst
Renommer tous les fichiers avec l'extension en leur nom définitif

======================================

10/02/2021
Cette approche n'est pas viable: il faut pouvoir hasher sur l'hôte.
Idée:
Créer un ficher rapport sur l'hote de la source et sur l'hote de dest
Les comparer et copier le nécessaire
-> Il faut hasher TOUS les fichiers...

Autre idée:
On crée les deux rapports (sans checksum), on compare et on cherche les
collisions. On envoie la liste des fichiers dont il faut calculer la checksum
sur l'hôte distant.


-> Trop d'opérations manuelles. Il faut que le programme puisse agir comme
client et comme serveur...




======================================


Actions:

src:
[A(1), B(2), C(3), D(4), G(1), H(6), I(6)]
dst:
[B(1), A(2), E(3), F(5)]


groups: [([A,G],[B]), ([B],[A]), ([C],[E]), ([D],[]),([],[F]), ([H, I],[])]

rm: [F]
local_cp_pre: [(B,G)]
mv: [(A,B), (E,C), (B,A)]
remote_cp: [D, H]
local_cp_post:[(H,I)]

=========================================

17/03/2021

Comment récupérer les infos sur les fichiers distants ?

Script myrror-server.py:
  Permet de détecter les fichiers sur la machine actuelle,
  calculer les propriétés d'une liste de fichiers et générer un Pickle/json
  pour répondre à des requêtes. DOIT garder une table
  (nom, chemin, date) -> checksums pour permettre une réponse rapide
  Ce code sera executé sur la cible via ssh depuis l'hôte. Il envoie
  (via stdout?) les data serialisée nécessaires.
  L'hôte recréera ou enrichiera alors en local les classes Remote_file


Exemple :
  python myrror-server.py get_files "/some/path"
  ['f1','f2',...]

  host$ scp flist remote:flist
  remote$ python myrror-server.py get_qhash flist
  {'f1':'123...','f2':'456...',...}

Nécessaire de passer les noms de fichiers autrement que par la ligne de commande
(limite en nb de char). Par ex scp un txt/pickle au préalable

========================================

04/04/2021

Possibilité d'éxectuer un .py sur serveur distant sans le copier:
ssh remote python3 < server.py - arg1 arg2
ou cat server.py | ssh remote python3 -

Par contre ne résoud pas la liste de fichers à traiter pour récupérer des
attributs
=> besoin de copier un fichier
ex:

with open('toupdate.txt','w') as f:
  for name in flist:
    f.write(name+'\n')
subprocess.run(f'scp -C toupdate.txt {host}:{path}toupdate.txt')
p = subprocess.run(f'ssh {host} python3 < server.py - get_qhash toupdate.txt')
get_attrs(p.stdout)


===========================================
07/04/2021

Time to put it all together!

Prise de recul:
Objectifs ?
  Synchro local>dst, dst>local et local>local (éventuellement dst>dst)
  ie. python3 myrror.py sync src/ remote:dst/
  -> Will compare, guess actions sum them up and ask the user before doing it

  list actions:
  python3 myrror.py todo src/ remote:dst/
  Will output a txt file with all the actions
  (Can then extract all remote copies to perform a "3-way" sync)

  Possibilité de choisir le check avec des arguments supplémentaires
  python3 myrror.py sync src/ dst/ rel_path+mtime qhash+md5

  Hashes calculées en mémoire locale (relative à la racine)
    .myrror-xx

============================================
09/06/2021

Actions élémentaires à effectuer:

  - Comparaison:
    Prends deux emplacements, donne la liste des groupes de fichiers
    Sauvera tout ce qui a été calculé pour accélérer les synchros ultérieures

  - Définition des actions:
    Prend la comparaison, définit une liste d'action à effectuer pour que les
    deux destinations soient identiques.
    Donne un ensemble d'actions (remote_copy, move, etc...)

  - Actions:
    Prend la liste des actions et les applique

============================================
13/060/2021
GROUPING METHOD

File = dict
Mandatory keys:
  - path
  - name
  - size

group:
  list of lists of files


=============================================
20/06/2021
How to perform the multi-criteria comparison:

  Group based on the first criteria group
  All the groups are saved
  The next list of criteria is applied on the first elt of each group
  The new groups are added to the groups (potentially joining groups together)
  Repeat until all criteria are tested

============================================
15/08/2021

Reprise du projet après plusieurs mois:
  Difficulté: comparaison complexe
  Besoin de clarifier ce procédé.

  Pour cela: recul nécessaire: il faut définir les fonctions du programme

  src/dst are locations ( [[user@]host:]dir)

  1/ myrror analyze src [--exclude/-e pattern]
    -> Simply lists the files on src (name, size, mtime)
    (with a header including the src)

  2/ myrror compare [src | src.myr_flist] [dst | dst.myr_flist] (criteria)
    Options: --exclude/-e : Patterns to exclude from both src and dst
    -> Will compare src and dst. If it is a path, analyze it, else use the
    flist
    Then, the criteria will be used to construct a list of actions
    (Contains the src and dst)

  3/ myrror apply f.myr_actions
    Apply the action list (src and dst are included in the file)

  4/ myrror sync src dst
    Analyze, compare and apply


  What will be necessary:

    remote.py
      Wraps myrror_server.py (sends it, perform checks and is used by the host
      to perform the remote actions)

    myrror_server.py:
      The file actually sent to the servers, must be able to take commands to:
      A way to query info over ssh
      A way to modify the destination over ssh (apply)

    analyze.py
      Perform the analysis of either local or remote dirs

    compare.py
      Takes the list of elements, compares and queries the necessary data
      through analyze.py to perform the comparison
      (may need an additional group.py for advanced grouping operations)

    apply.py
      Apply the list of actions (uses myrror_server.py)

    cli.py
      Provides a cli for all these commands using click

  2ème point complexe: les commandes à distance. Besoin de clarifier ce point
  aussi

  Principe: on copie myrror_server.py et via remote.py on appelle le script
  en envoyant les arguments. Inputs via un fichier .myrror-toupdate.txt
  outputs via stdout



================================================

27/12/2021 - PHD over, more time to work on this project !

Thinking about the temp files:
  .myrror-cache.p: Local cache containing all the metadata already computed
    (format to be determined)

  diff.p: A list of the differences between the two targets
    Contains the source, dest, list of the differences


31/12/2021 - Things are going well

Got the local and remote detection working, stub of the compare program

Need to work on the multi criteria comparison

Example:
- ['path', 'mtime'] (size is implied)
- OR ['name', 'qhash']
- OR ['sha256']

First comparison:
groups = [...]
uniques = [...]

We need to split groups in TWO lists:
matched, with files on both side
and unmatched with files on only one side

EACH FILE MUST APPEAR EXACTLY ONCE IN matched+unmatched+[uniques]

Then, we perform the second pass on all the files that are not in matched

etc... until all files end in match or all the criteria were tested

01/01/2022 - Comparison is hard...

This idea is great (it was implemented in multi_compare)
but has one major limitation:
    If two files are matched based on a first list of criteria,
    they are removed from the matching pool!
    Example: A and B match based on crit1, B and C match based on crit2
    C will be unmatched as it will not be compared with neither A or B
    (OK if there are no duplicates on src)

FIX: keep a file from src from each matched group in the unmatched pool
BUT, this breaks the unicity rule. How to deal with it ?
idea: add "ghost" files that will later be removed and merged to the group
containing the real file. They can be copies with a special attribute
